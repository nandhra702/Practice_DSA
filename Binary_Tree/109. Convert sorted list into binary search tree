/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    TreeNode* insert(vector<int>vec,int start,int end){
        if(start>end){
            return NULL;
        }
        int mid = start+(end-start)/2;
        TreeNode* root = new TreeNode(vec[mid]);
        root->left = insert(vec,start,mid-1);
        root->right = insert(vec,mid+1,end);
        return root;
    }

    TreeNode* sortedListToBST(ListNode* head) {
        //firstly, let me iterate and get the elements of the list into a vector. And proceed
        vector<int>vec;
        while(head!=NULL){
            vec.push_back(head->val);
            head=head->next;
        }
        //now, send this to the function
        return insert(vec,0,vec.size()-1);
    }
};
