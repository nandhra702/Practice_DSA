/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    void swap(TreeNode* root){
        if(!root){
            return;
        }

        
            //while both exists
            //we dont need to have a condition to check if nodes exist or not
            TreeNode* temp = root->left;
            root->left = root->right;
            root->right = temp;
        

        swap(root->right);  //as now right is the new left;
        swap(root->left);

    }

    TreeNode* invertTree(TreeNode* root) {
        //we need to swap the pointers till root->left and root->right exists
        swap(root);
        //now we need to do Level order traversal
        return root;
    }
};
